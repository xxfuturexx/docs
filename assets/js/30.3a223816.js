(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{418:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"网络安全、http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络安全、http协议"}},[t._v("#")]),t._v(" 网络安全、HTTP协议")]),t._v(" "),a("h3",{attrs:{id:"tcp-udp-区别-★★★★"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-udp-区别-★★★★"}},[t._v("#")]),t._v(" TCP UDP 区别（★★★★）")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("UDP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("向上层提供无连接不可靠服务。，"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("TCP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("向上层提供面向连接的可靠服务 \n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("区别")]),t._v(" "),a("th",[t._v("UDP")]),t._v(" "),a("th",[t._v("TCP")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("是否连接")]),t._v(" "),a("td",[t._v("无连接")]),t._v(" "),a("td",[t._v("面向连接")])]),t._v(" "),a("tr",[a("td",[t._v("是否可靠")]),t._v(" "),a("td",[t._v("不可靠传输，不使用流量控制和拥塞控制")]),t._v(" "),a("td",[t._v("可靠传输，使用流量控制和拥塞控制")])]),t._v(" "),a("tr",[a("td",[t._v("连接对象个数")]),t._v(" "),a("td",[t._v("支持一对一，一对多，多对一和多对多交互通信")]),t._v(" "),a("td",[t._v("只能是一对一通信")])]),t._v(" "),a("tr",[a("td",[t._v("传输方式")]),t._v(" "),a("td",[t._v("面向报文")]),t._v(" "),a("td",[t._v("面向字节流")])]),t._v(" "),a("tr",[a("td",[t._v("首部开销")]),t._v(" "),a("td",[t._v("首部开销小，仅8字节")]),t._v(" "),a("td",[t._v("首部最小20字节，最大60字节")])]),t._v(" "),a("tr",[a("td",[t._v("适用场景")]),t._v(" "),a("td",[t._v("适用于实时应用（IP电话、视频会议、直播、qq发信息等）")]),t._v(" "),a("td",[t._v("适用于要求可靠传输的应用，例如文件传输")])])])]),t._v(" "),a("h3",{attrs:{id:"http和https区别-高频"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http和https区别-高频"}},[t._v("#")]),t._v(" Http和Https区别（高频）")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" 的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" 以http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 开头，而"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" 以https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 开头\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" 是不安全的，而 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 是安全的\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" 标准端口是"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" ，而 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 的标准端口是"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("在OSI")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" 网络模型中，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v("工作于应用层，而"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SSL")]),t._v("在传输层和应用层之间加密（解密）\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" 无法加密，而"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 对传输的数据进行加密\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("无需证书，而"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTPS")]),t._v(" 需要"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CA")]),t._v("机构颁发的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SSL")]),t._v("证书\n")])])]),a("h3",{attrs:{id:"get和post区别-高频-★★★★★-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别-高频-★★★★★-0"}},[t._v("#")]),t._v(" GET和POST区别（高频）（★★★★★）0")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("在浏览器回退不会再次请求，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("会再次提交请求\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("请求会被浏览器主动缓存，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("不会，要手动设置\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("请求参数会被完整保留在浏览器历史记录里，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("中的参数不会\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("请求在"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("中传送的参数是有长度限制的，而"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("没有限制\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("参数通过"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("传递，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("放在Request body中\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("参数暴露在地址栏不安全，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("放在报文内部更安全\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("一般用于查询信息，"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("一般用于提交某种信息进行某些修改操作\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("产生一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v("数据包；"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("产生两个"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP")]),t._v("数据包\n")])])]),a("h3",{attrs:{id:"理解xss-csrf-ddos攻击原理以及避免方式-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解xss-csrf-ddos攻击原理以及避免方式-0"}},[t._v("#")]),t._v(" 理解xss，csrf，ddos攻击原理以及避免方式 0")]),t._v(" "),a("p",[a("code",[t._v("XSS")]),t._v("("),a("code",[t._v("Cross-Site Scripting")]),t._v("，"),a("strong",[t._v("跨站脚本攻击")]),t._v(")是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 "),a("code",[t._v("cookie，session tokens")]),t._v("，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。")]),t._v(" "),a("p",[a("code",[t._v("CSRF")]),t._v("（"),a("code",[t._v("Cross-site request forgery")]),t._v("）"),a("strong",[t._v("跨站请求伪造")]),t._v("：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),a("p",[a("strong",[t._v("XSS（跨站脚本攻击）避免方式：")])]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("url")]),t._v("参数使用"),a("code",[t._v("encodeURIComponent")]),t._v("方法转义")])]),t._v(" "),a("li",[a("p",[t._v("尽量不使用"),a("code",[t._v("InnerHtml")]),t._v("插入"),a("code",[t._v("HTML")]),t._v("内容")])]),t._v(" "),a("li",[a("p",[t._v("使用特殊符号、标签转义符。")])])]),t._v(" "),a("p",[a("strong",[a("code",[t._v("CSRF")]),t._v("（跨站请求伪造）避免方式：")])]),t._v(" "),a("ol",[a("li",[t._v("添加验证码")]),t._v(" "),a("li",[t._v("使用token\n"),a("ul",[a("li",[t._v("服务端给用户生成一个token，加密后传递给用户")]),t._v(" "),a("li",[t._v("用户在提交请求时，需要携带这个token")]),t._v(" "),a("li",[t._v("服务端验证token是否正确")])])])]),t._v(" "),a("p",[a("code",[t._v("DDoS")]),t._v("又叫分布式拒绝服务，全称 "),a("code",[t._v("Distributed Denial of Service")]),t._v("，其原理就是利用大量的请求造成服务器资源过载，导致服务不可用。")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("DDos")]),t._v("避免方式：")])]),t._v(" "),a("ol",[a("li",[t._v("限制单IP请求频率。")]),t._v(" "),a("li",[t._v("防火墙等防护设置禁止"),a("code",[t._v("ICMP")]),t._v("包等")]),t._v(" "),a("li",[t._v("检查特权端口的开放")])]),t._v(" "),a("h3",{attrs:{id:"http特性以及状态码-★★★★-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http特性以及状态码-★★★★-0"}},[t._v("#")]),t._v(" http特性以及状态码（★★★★）0")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("比如：\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("响应成功\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v("永久重定向\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v("临时重定向\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),t._v("资源缓存\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v("服务器禁止访问\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v("服务器资源未找到\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v("服务器内部错误\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v(" 服务器繁忙\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("xx\tInformational（信息状态码）\t  接受请求正在处理\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("xx\tSuccess（成功状态码）            请求正常处理完毕\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("xx\tRedirection（重定向状态码）\t\t 需要附加操作已完成请求\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("xx\tClient Error（客户端错误状态码）\t服务器无法处理请求\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("xx\tServer Error（服务器错误状态码）\t服务器处理请求出错\n")])])]),a("h3",{attrs:{id:"三次握手-四次挥手-★★★★★"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手-四次挥手-★★★★★"}},[t._v("#")]),t._v(" 三次握手，四次挥手（★★★★★）")]),t._v(" "),a("h3",{attrs:{id:"http三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http三次握手"}},[t._v("#")]),t._v(" http三次握手")]),t._v(" "),a("ul",[a("li",[t._v("第一步：客户端发送SYN（同步）报文到服务端发起握手，发送完之后客户端处于SYN_Send状态")]),t._v(" "),a("li",[t._v("第二步：服务端收到SYN报文之后回复SYN和ACK（确认）报文给客户端")]),t._v(" "),a("li",[t._v("第三步：客户端收到SYN和ACK，向服务端发送一个ACK报文,客户端转为established（已获确认的）状态，此时服务端收到ACK报文后也处于established状态，此时双方已建立了连接")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/net-img/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",alt:"image-20"}})]),t._v(" "),a("h3",{attrs:{id:"http四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http四次挥手"}},[t._v("#")]),t._v(" http四次挥手")]),t._v(" "),a("p",[t._v("刚开始双方都处于"),a("code",[t._v("establised")]),t._v(" 状态，假如是客户端先发起关闭请求，则：")]),t._v(" "),a("ol",[a("li",[t._v("第一次挥手：客户端发送"),a("strong",[t._v("一个 FIN 报文")]),t._v("，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态。")]),t._v(" "),a("li",[t._v("第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。")]),t._v(" "),a("li",[t._v("第三次挥手：过了一段时间后，如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。")]),t._v(" "),a("li",[t._v("第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态")]),t._v(" "),a("li",[t._v("服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/net-img/tcp四次挥手.png"}}),t._v("（不用管FIN+ACK的ACK）")]),t._v(" "),a("h3",{attrs:{id:"http1-0、http1-1、http2-0的区别-★★★★-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-0、http1-1、http2-0的区别-★★★★-0"}},[t._v("#")]),t._v(" http1.0、http1.1、http2.0的区别（★★★★）0")]),t._v(" "),a("ol",[a("li",[t._v("1.1和1.0相比，1.1可以一次传输多个文件")]),t._v(" "),a("li",[t._v("http1.x解析基于文本，http2.0采用二进制格式，新增特性 多路复用、header压缩、服务端推送(静态html资源)")])]),t._v(" "),a("h3",{attrs:{id:"输入url后http请求的完整过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入url后http请求的完整过程"}},[t._v("#")]),t._v(" 输入url后http请求的完整过程")]),t._v(" "),a("blockquote",[a("p",[t._v("建立TCP连接->发送请求行->发送请求头->（到达服务器）发送状态行->发送响应头->发送响应数据->断TCP连接")])]),t._v(" "),a("h3",{attrs:{id:"网络模型-各自有哪些协议-端口号是多少-★★★★★"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络模型-各自有哪些协议-端口号是多少-★★★★★"}},[t._v("#")]),t._v(" 网络模型，各自有哪些协议，端口号是多少（★★★★★）")]),t._v(" "),a("p",[a("strong",[t._v("osi7层模型，tcp5层模型")])]),t._v(" "),a("p",[t._v("osi7层模型："),a("code",[t._v("物理层-数据链路层-网络层-传输层-会话层-表示层-应用层")])]),t._v(" "),a("p",[t._v("tcp5层模型："),a("code",[t._v("物理层-数据链路层-网络层-传输层-应用层")])]),t._v(" "),a("h3",{attrs:{id:"_2-输入url到展示页面的全过程-★★★★★"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-输入url到展示页面的全过程-★★★★★"}},[t._v("#")]),t._v(" 2) 输入URL到展示页面的全过程（★★★★★）")]),t._v(" "),a("p",[t._v("域名DNS解析,解析到真正的IP地址")]),t._v(" "),a("p",[t._v("|")]),t._v(" "),a("p",[t._v("客户端与服务端建立TCP连接，3次握手")]),t._v(" "),a("p",[t._v("​           |")]),t._v(" "),a("p",[t._v("客户端发送Http请求")]),t._v(" "),a("p",[t._v("​           |")]),t._v(" "),a("p",[t._v("服务端接收到http请求，处理，并返回")]),t._v(" "),a("p",[t._v("​           |")]),t._v(" "),a("p",[t._v("客户端接收到返回数据，处理数据（渲染页面，执行js）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("三个方面：\n网络篇:\n\t     构建请求\n            \n             DNS服务器会进行域名解析,解析到真正的IP地址\n             \t\t\t|\n             客户端与服务端建立TCP连接(三次握手)\n             \t\t\t|\n\t\t\t 客户端发送HTTP请求(网络请求后网络响应)\n\t\t\t \t\t\t|\n\t\t\t 服务端接收到http请求，处理，并返回数据\n\t\t\t \t\t\t|\n\t\t\t 客户端接收到返回数据，处理数据（渲染页面，执行js）\n浏览器解析篇:\n\t   \t\t解析html构建DOM树\n            解析css构建CSS树、样式计算\n            解析JS，使用js脚本引擎解析执行,动态地改变DOM树\n            生成布局树(Layout Tree)\n浏览器渲染篇:\n            建立图层树(Layer Tree)\n            生成绘制列表\n            生成图块并栅格化\n            显示器显示内容\n            (浏览器会将各层的信息发送给GPU,GPU会将各层合成,显示在屏幕上)\n            最后TCP 四次挥手断开连接\n            \n")])])]),a("h3",{attrs:{id:"http如何实现缓存-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http如何实现缓存-了解"}},[t._v("#")]),t._v(" http如何实现缓存（了解）")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("强缓存")]),t._v("==>Expires(过期时间)/Cache-Control(no-cache)(优先级高) 协商缓存 ==>Last-Modified/Etag(优先级高)Etag适用于经常改变的小文件  Last-Modefied适用于不怎么经常改变的大文件")]),t._v(" "),a("li",[a("strong",[t._v("强缓存策略和协商缓存策略")]),t._v("在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);